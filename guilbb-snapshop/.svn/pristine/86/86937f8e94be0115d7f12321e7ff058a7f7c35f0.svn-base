// finish (and comment) me!

package gui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import filters.EdgeDetectFilter;
import filters.EdgeHighlightFilter;
import filters.Filter;
import filters.FlipHorizontalFilter;
import filters.FlipVerticalFilter;
import filters.GrayscaleFilter;
import filters.SharpenFilter;
import filters.SoftenFilter;
import image.PixelImage;
import javafx.css.Size;

/**
 * 
 * @author ???
 * @version ???
 */
public class SnapShopGUI extends JFrame {
    

    JButton buttonOpen = new JButton("Open...");
    JButton buttonSaveAs = new JButton("Save As...");
    JButton buttonCloseImage = new JButton("Close Image");
    
    final JPanel topPanel = new JPanel();
    final JPanel centerPanel = new JPanel();
    final JPanel bottomPanel = new JPanel();
    
    JFileChooser fileChooser = new JFileChooser();
    
    JLabel label = new JLabel();
    PixelImage myDisplayImage;
    PixelImage myOriginalDisplayImage;
    
    EdgeDetectFilter edgeDetectFilter;
    EdgeHighlightFilter edgeHighlightFilter; 
    FlipHorizontalFilter flipHorizontalFilter;
    FlipVerticalFilter flipVerticalFilter;
    GrayscaleFilter grayscaleFilter;
    SharpenFilter sharpenFilter;
    SoftenFilter softenFilter;
    Map<String,Filter> filterAndName = new TreeMap<String,Filter>();
        
    /** A size for the JFrame. */
    private static final Dimension FRAME_SIZE = new Dimension(250, 630);
    
    public SnapShopGUI() {
        super("TCSS 305 – Assignment 4");
    }
    
    /**
     * Displays a simple JFrame.
     */
    public void start() {

        edgeDetectFilter = new EdgeDetectFilter();
        edgeHighlightFilter = new EdgeHighlightFilter(); 
        flipHorizontalFilter = new FlipHorizontalFilter();
        flipVerticalFilter = new FlipVerticalFilter();
        grayscaleFilter = new GrayscaleFilter();
        sharpenFilter = new SharpenFilter();
        softenFilter = new SoftenFilter();
        
        filterAndName.put(edgeDetectFilter.getDescription(), edgeDetectFilter);
        filterAndName.put(edgeHighlightFilter.getDescription(), edgeHighlightFilter);
        filterAndName.put(flipHorizontalFilter.getDescription(), flipHorizontalFilter);
        filterAndName.put(flipVerticalFilter.getDescription(), flipVerticalFilter);
        filterAndName.put(grayscaleFilter.getDescription(), grayscaleFilter);
        filterAndName.put(sharpenFilter.getDescription(), sharpenFilter);
        filterAndName.put(softenFilter.getDescription(), softenFilter);
        
        
        filterAndName.forEach((k,v) ->{
            JButton button = new JButton(k);
            topPanel.add(button);
            button.addActionListener(new FilterListener());
        });
        
        
        // Don't forget to set the close operation!
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        /*
         * Attempt to center the frame on the screen.
         * There are better ways to do this which be demonstrated soon.
         */
        setLocationRelativeTo(null);
        
        
        addButtons();
         
        ActionListener openListener = new OpenListener();
        buttonOpen.addActionListener(openListener);
        
        ActionListener saveAsListener = new SaveAsListener();
        buttonSaveAs.addActionListener(saveAsListener);
        
        ActionListener closeImageListener = new CloseImageListener();
        buttonCloseImage.addActionListener(closeImageListener);


        // pack() resizes the Frame to fit the contents of the frame
        
        pack();
        setMinimumSize(getSize());

        setVisible(true);
    }
    
    private void addButtons() {
        
        Component[] buttons = topPanel.getComponents();
        for(Component button : buttons) {
            button.setEnabled(false);
        }
        
        
        buttonSaveAs.setEnabled(false);
        buttonCloseImage.setEnabled(false);
        
        bottomPanel.add(buttonOpen);
        bottomPanel.add(buttonSaveAs);
        bottomPanel.add(buttonCloseImage);
        
        add(topPanel, BorderLayout.NORTH);
        add(bottomPanel, BorderLayout.SOUTH);
    }
    
    private void enableButtons() {
        
        Component[] buttons = topPanel.getComponents();
        for(Component button : buttons) {
            button.setEnabled(true);
        }
        
        buttonSaveAs.setEnabled(true);
        buttonCloseImage.setEnabled(true);
    }
    
    final class OpenListener implements ActionListener {
        public void actionPerformed(final ActionEvent theEvent) {
            
            if (fileChooser.showOpenDialog(buttonOpen) == JFileChooser.APPROVE_OPTION) {
                try {
                    File imageFile = fileChooser.getSelectedFile();
                    PixelImage image;
                    image = PixelImage.load(imageFile);
                    myDisplayImage = image;
                    myOriginalDisplayImage = image;
                    label.setIcon(new ImageIcon(image));
                    centerPanel.add(label);
                    add(centerPanel, BorderLayout.CENTER);
                    enableButtons();
                    setMinimumSize(null);
                    pack();
                    setMinimumSize(getSize());
                
            }
                catch (IOException e) {
                    // TODO Auto-generated catch block
                    javax.swing.JOptionPane.showMessageDialog(null, 
                                             "The selected file did not contain an image!",
                                             "Error!", JOptionPane.ERROR_MESSAGE);
                }
            }
            fileChooser.setCurrentDirectory(fileChooser.getCurrentDirectory());
            
            
        }
    }
    
    final class SaveAsListener implements ActionListener {
        public void actionPerformed(final ActionEvent theEvent) {
            
            if (fileChooser.showSaveDialog(buttonSaveAs) == JFileChooser.APPROVE_OPTION) {
                try {
                    myDisplayImage.save(fileChooser.getSelectedFile());
            }
                catch (IOException e) {
                    // TODO Auto-generated catch block
                    javax.swing.JOptionPane.showMessageDialog(null, "File cannot be written!", 
                                                              "Error!", JOptionPane.ERROR_MESSAGE);
                }
            }
            fileChooser.setCurrentDirectory(fileChooser.getCurrentDirectory());  
        }
    }
    
    final class FilterListener implements ActionListener {
        public void actionPerformed(final ActionEvent theEvent) {
            Filter toApply = filterAndName.get(theEvent.getActionCommand());
            toApply.filter(myDisplayImage);
            label.setIcon(new ImageIcon(myDisplayImage));
           
        }
    }
    
    final class CloseImageListener implements ActionListener {
        public void actionPerformed(final ActionEvent theEvent) {
            
            remove(centerPanel);
            Component[] buttons = topPanel.getComponents();
            for(Component button : buttons) {
                button.setEnabled(false);
            }
            setMinimumSize(null);
            repaint();
            pack();
            setMinimumSize(getSize());
            
        }
    }
    
}